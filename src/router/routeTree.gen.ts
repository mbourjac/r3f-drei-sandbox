/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../routes/__root'
import { Route as ScenesRouteImport } from './../routes/_scenes'
import { Route as IndexRouteImport } from './../routes/index'
import { Route as ScenesText3dRouteImport } from './../routes/_scenes/text-3d'
import { Route as ScenesPostProcessingRouteImport } from './../routes/_scenes/post-processing'
import { Route as ScenesPortalSceneRouteImport } from './../routes/_scenes/portal-scene'
import { Route as ScenesMouseEventsRouteImport } from './../routes/_scenes/mouse-events'
import { Route as ScenesLoadModelsRouteImport } from './../routes/_scenes/load-models'
import { Route as ScenesFirstSceneRouteImport } from './../routes/_scenes/first-scene'
import { Route as ScenesEnvironmentAndStagingRouteImport } from './../routes/_scenes/environment-and-staging'
import { Route as ScenesDreiRouteImport } from './../routes/_scenes/drei'
import { Route as ScenesDebugRouteImport } from './../routes/_scenes/debug'

const ScenesRoute = ScenesRouteImport.update({
  id: '/_scenes',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ScenesText3dRoute = ScenesText3dRouteImport.update({
  id: '/text-3d',
  path: '/text-3d',
  getParentRoute: () => ScenesRoute,
} as any)
const ScenesPostProcessingRoute = ScenesPostProcessingRouteImport.update({
  id: '/post-processing',
  path: '/post-processing',
  getParentRoute: () => ScenesRoute,
} as any)
const ScenesPortalSceneRoute = ScenesPortalSceneRouteImport.update({
  id: '/portal-scene',
  path: '/portal-scene',
  getParentRoute: () => ScenesRoute,
} as any)
const ScenesMouseEventsRoute = ScenesMouseEventsRouteImport.update({
  id: '/mouse-events',
  path: '/mouse-events',
  getParentRoute: () => ScenesRoute,
} as any)
const ScenesLoadModelsRoute = ScenesLoadModelsRouteImport.update({
  id: '/load-models',
  path: '/load-models',
  getParentRoute: () => ScenesRoute,
} as any)
const ScenesFirstSceneRoute = ScenesFirstSceneRouteImport.update({
  id: '/first-scene',
  path: '/first-scene',
  getParentRoute: () => ScenesRoute,
} as any)
const ScenesEnvironmentAndStagingRoute =
  ScenesEnvironmentAndStagingRouteImport.update({
    id: '/environment-and-staging',
    path: '/environment-and-staging',
    getParentRoute: () => ScenesRoute,
  } as any)
const ScenesDreiRoute = ScenesDreiRouteImport.update({
  id: '/drei',
  path: '/drei',
  getParentRoute: () => ScenesRoute,
} as any)
const ScenesDebugRoute = ScenesDebugRouteImport.update({
  id: '/debug',
  path: '/debug',
  getParentRoute: () => ScenesRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/debug': typeof ScenesDebugRoute
  '/drei': typeof ScenesDreiRoute
  '/environment-and-staging': typeof ScenesEnvironmentAndStagingRoute
  '/first-scene': typeof ScenesFirstSceneRoute
  '/load-models': typeof ScenesLoadModelsRoute
  '/mouse-events': typeof ScenesMouseEventsRoute
  '/portal-scene': typeof ScenesPortalSceneRoute
  '/post-processing': typeof ScenesPostProcessingRoute
  '/text-3d': typeof ScenesText3dRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/debug': typeof ScenesDebugRoute
  '/drei': typeof ScenesDreiRoute
  '/environment-and-staging': typeof ScenesEnvironmentAndStagingRoute
  '/first-scene': typeof ScenesFirstSceneRoute
  '/load-models': typeof ScenesLoadModelsRoute
  '/mouse-events': typeof ScenesMouseEventsRoute
  '/portal-scene': typeof ScenesPortalSceneRoute
  '/post-processing': typeof ScenesPostProcessingRoute
  '/text-3d': typeof ScenesText3dRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_scenes': typeof ScenesRouteWithChildren
  '/_scenes/debug': typeof ScenesDebugRoute
  '/_scenes/drei': typeof ScenesDreiRoute
  '/_scenes/environment-and-staging': typeof ScenesEnvironmentAndStagingRoute
  '/_scenes/first-scene': typeof ScenesFirstSceneRoute
  '/_scenes/load-models': typeof ScenesLoadModelsRoute
  '/_scenes/mouse-events': typeof ScenesMouseEventsRoute
  '/_scenes/portal-scene': typeof ScenesPortalSceneRoute
  '/_scenes/post-processing': typeof ScenesPostProcessingRoute
  '/_scenes/text-3d': typeof ScenesText3dRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/debug'
    | '/drei'
    | '/environment-and-staging'
    | '/first-scene'
    | '/load-models'
    | '/mouse-events'
    | '/portal-scene'
    | '/post-processing'
    | '/text-3d'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/debug'
    | '/drei'
    | '/environment-and-staging'
    | '/first-scene'
    | '/load-models'
    | '/mouse-events'
    | '/portal-scene'
    | '/post-processing'
    | '/text-3d'
  id:
    | '__root__'
    | '/'
    | '/_scenes'
    | '/_scenes/debug'
    | '/_scenes/drei'
    | '/_scenes/environment-and-staging'
    | '/_scenes/first-scene'
    | '/_scenes/load-models'
    | '/_scenes/mouse-events'
    | '/_scenes/portal-scene'
    | '/_scenes/post-processing'
    | '/_scenes/text-3d'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ScenesRoute: typeof ScenesRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_scenes': {
      id: '/_scenes'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ScenesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_scenes/text-3d': {
      id: '/_scenes/text-3d'
      path: '/text-3d'
      fullPath: '/text-3d'
      preLoaderRoute: typeof ScenesText3dRouteImport
      parentRoute: typeof ScenesRoute
    }
    '/_scenes/post-processing': {
      id: '/_scenes/post-processing'
      path: '/post-processing'
      fullPath: '/post-processing'
      preLoaderRoute: typeof ScenesPostProcessingRouteImport
      parentRoute: typeof ScenesRoute
    }
    '/_scenes/portal-scene': {
      id: '/_scenes/portal-scene'
      path: '/portal-scene'
      fullPath: '/portal-scene'
      preLoaderRoute: typeof ScenesPortalSceneRouteImport
      parentRoute: typeof ScenesRoute
    }
    '/_scenes/mouse-events': {
      id: '/_scenes/mouse-events'
      path: '/mouse-events'
      fullPath: '/mouse-events'
      preLoaderRoute: typeof ScenesMouseEventsRouteImport
      parentRoute: typeof ScenesRoute
    }
    '/_scenes/load-models': {
      id: '/_scenes/load-models'
      path: '/load-models'
      fullPath: '/load-models'
      preLoaderRoute: typeof ScenesLoadModelsRouteImport
      parentRoute: typeof ScenesRoute
    }
    '/_scenes/first-scene': {
      id: '/_scenes/first-scene'
      path: '/first-scene'
      fullPath: '/first-scene'
      preLoaderRoute: typeof ScenesFirstSceneRouteImport
      parentRoute: typeof ScenesRoute
    }
    '/_scenes/environment-and-staging': {
      id: '/_scenes/environment-and-staging'
      path: '/environment-and-staging'
      fullPath: '/environment-and-staging'
      preLoaderRoute: typeof ScenesEnvironmentAndStagingRouteImport
      parentRoute: typeof ScenesRoute
    }
    '/_scenes/drei': {
      id: '/_scenes/drei'
      path: '/drei'
      fullPath: '/drei'
      preLoaderRoute: typeof ScenesDreiRouteImport
      parentRoute: typeof ScenesRoute
    }
    '/_scenes/debug': {
      id: '/_scenes/debug'
      path: '/debug'
      fullPath: '/debug'
      preLoaderRoute: typeof ScenesDebugRouteImport
      parentRoute: typeof ScenesRoute
    }
  }
}

interface ScenesRouteChildren {
  ScenesDebugRoute: typeof ScenesDebugRoute
  ScenesDreiRoute: typeof ScenesDreiRoute
  ScenesEnvironmentAndStagingRoute: typeof ScenesEnvironmentAndStagingRoute
  ScenesFirstSceneRoute: typeof ScenesFirstSceneRoute
  ScenesLoadModelsRoute: typeof ScenesLoadModelsRoute
  ScenesMouseEventsRoute: typeof ScenesMouseEventsRoute
  ScenesPortalSceneRoute: typeof ScenesPortalSceneRoute
  ScenesPostProcessingRoute: typeof ScenesPostProcessingRoute
  ScenesText3dRoute: typeof ScenesText3dRoute
}

const ScenesRouteChildren: ScenesRouteChildren = {
  ScenesDebugRoute: ScenesDebugRoute,
  ScenesDreiRoute: ScenesDreiRoute,
  ScenesEnvironmentAndStagingRoute: ScenesEnvironmentAndStagingRoute,
  ScenesFirstSceneRoute: ScenesFirstSceneRoute,
  ScenesLoadModelsRoute: ScenesLoadModelsRoute,
  ScenesMouseEventsRoute: ScenesMouseEventsRoute,
  ScenesPortalSceneRoute: ScenesPortalSceneRoute,
  ScenesPostProcessingRoute: ScenesPostProcessingRoute,
  ScenesText3dRoute: ScenesText3dRoute,
}

const ScenesRouteWithChildren =
  ScenesRoute._addFileChildren(ScenesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ScenesRoute: ScenesRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
